import asyncio
import json
import logging
import aiohttp
from datetime import datetime
from typing import Dict, Any, Optional
from websockets import connect, ConnectionClosed
import websockets

from models import Call, CallCreate, CallUpdate, CallStatus, OperatorStatus
from database import DatabaseManager
from db import get_db
from websocket_manager import get_websocket_manager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤
from call_flow_logic import (
    call_flow_logic, 
    call_stats_processor, 
    CallType, 
    CallProcessingStrategy
)

logger = logging.getLogger(__name__)

class AsteriskEventHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç Asterisk ARI —á–µ—Ä–µ–∑ WebSocket —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    
    def __init__(self, ari_client):
        self.ari_client = ari_client
        self.websocket = None
        self.running = False
        self.active_calls: Dict[str, Dict[str, Any]] = {}  # channel_id -> call_data
        self.active_queue_entries: Dict[str, Dict[str, Any]] = {}  # uniqueid -> queue_entry
        self.websocket_manager = get_websocket_manager()
        
    async def start_listening(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π Asterisk ARI"""
        if not self.ari_client or not self.ari_client.connected:
            logger.error("ARI client not connected, cannot start event listening")
            return False
            
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º WebSocket URL –¥–ª—è Asterisk ARI
            ws_url = f"ws://{self.ari_client.host}:{self.ari_client.port}/ari/events"
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            auth_params = f"api_key={self.ari_client.username}:{self.ari_client.password}&app=SmartCallCenter"
            full_url = f"{ws_url}?{auth_params}"
            
            logger.info(f"Connecting to Asterisk WebSocket: {ws_url}")
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
            self.websocket = await connect(full_url)
            self.running = True
            
            logger.info("‚úÖ Connected to Asterisk ARI WebSocket - listening for events...")
            
            # –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            await self._listen_for_events()
            
        except Exception as e:
            logger.error(f"Failed to connect to Asterisk WebSocket: {e}")
            return False
    
    async def _listen_for_events(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
        try:
            while self.running and self.websocket:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç Asterisk
                    message = await self.websocket.recv()
                    event_data = json.loads(message)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                    await self._handle_event(event_data)
                    
                except ConnectionClosed:
                    logger.warning("WebSocket connection to Asterisk closed")
                    break
                except json.JSONDecodeError as e:
                    logger.error(f"Invalid JSON from Asterisk: {e}")
                except Exception as e:
                    logger.error(f"Error processing Asterisk event: {e}")
                    
        except Exception as e:
            logger.error(f"Fatal error in event listening loop: {e}")
        finally:
            self.running = False
            if self.websocket:
                await self.websocket.close()
    
    async def _handle_event(self, event_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –æ—Ç Asterisk"""
        event_type = event_data.get("type")
        
        logger.debug(f"üì® Received Asterisk event: {event_type}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π Stasis (–¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤)
        if event_type == "StasisStart":
            await self._handle_stasis_start(event_data)
        elif event_type == "StasisEnd":
            await self._handle_stasis_end(event_data)
        elif event_type == "ChannelStateChange":
            await self._handle_channel_state_change(event_data)
        elif event_type == "ChannelDestroyed":
            await self._handle_channel_destroyed(event_data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—á–µ—Ä–µ–¥–µ–π (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
        elif event_type == "QueueCallerJoin":
            await self._handle_queue_caller_join(event_data)
        elif event_type == "QueueCallerLeave":
            await self._handle_queue_caller_leave(event_data)
        elif event_type == "QueueMemberRingging":
            await self._handle_queue_member_ringging(event_data)
        elif event_type == "QueueMemberPause":
            await self._handle_queue_member_pause(event_data)
        elif event_type == "QueueMemberUnpause":
            await self._handle_queue_member_unpause(event_data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π bridge (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
        elif event_type == "BridgeCreated":
            await self._handle_bridge_created(event_data)
        elif event_type == "ChannelEnteredBridge":
            await self._handle_channel_entered_bridge(event_data)
        elif event_type == "ChannelLeftBridge":
            await self._handle_channel_left_bridge(event_data)
        
        else:
            logger.debug(f"Unhandled event type: {event_type}")
    
    # === –û–ë–†–ê–ë–û–¢–ö–ê STASIS –°–û–ë–´–¢–ò–ô ===
    
    async def _handle_stasis_start(self, event_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ Stasis –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫)"""
        try:
            channel = event_data.get("channel", {})
            args = event_data.get("args", [])
            
            channel_id = channel.get("id")
            caller_number = channel.get("caller", {}).get("number", "Unknown")
            called_number = args[0] if args else channel.get("dialplan", {}).get("exten", "")
            
            logger.info(f"üîî –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö: {caller_number} -> {called_number}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
            routing_decision = await call_flow_logic.determine_call_routing({
                "caller_number": caller_number,
                "called_number": called_number,
                "channel_id": channel_id,
                "channel_data": channel
            })
            
            logger.info(f"üìã Routing decision: {routing_decision.get('action')}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ—à–µ–Ω–∏—é
            await self._execute_routing_decision(routing_decision, event_data)
            
        except Exception as e:
            logger.error(f"Error handling StasisStart: {e}")
    
    async def _execute_routing_decision(self, decision: Dict[str, Any], original_event: Dict[str, Any]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"""
        action = decision.get("action")
        channel = original_event.get("channel", {})
        channel_id = channel.get("id")
        
        try:
            if action == "dial_direct":
                # –ü—Ä—è–º–æ–π –∑–≤–æ–Ω–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
                await self._execute_direct_dial(decision, channel)
                
            elif action == "route_to_queue":
                # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥—å Asterisk
                await self._execute_queue_routing(decision, channel)
                
            elif action == "ivr_afterhours":
                # IVR –ø–æ—Å–ª–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
                await self._execute_ivr(decision, channel, "afterhours")
                
            elif action == "ivr_no_operators":
                # IVR –∫–æ–≥–¥–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
                await self._execute_ivr(decision, channel, "no_operators")
                
            elif action == "dial_unavailable":
                # –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - fallback
                fallback_queue = decision.get("fallback_queue")
                if fallback_queue:
                    decision["action"] = "route_to_queue"
                    decision["queue_name"] = fallback_queue
                    await self._execute_queue_routing(decision, channel)
                else:
                    await self._execute_hangup(channel, "Operator unavailable")
            
            else:
                logger.warning(f"Unknown routing action: {action}")
                await self._execute_hangup(channel, "Unknown routing")
                
        except Exception as e:
            logger.error(f"Error executing routing decision: {e}")
            await self._execute_hangup(channel, "Routing error")
    
    async def _execute_direct_dial(self, decision: Dict[str, Any], channel: Dict[str, Any]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –∑–≤–æ–Ω–∫–∞"""
        target_extension = decision.get("target_extension")
        channel_id = channel.get("id")
        
        logger.info(f"üìû Direct dial to {target_extension}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ –≤ –ë–î
        db = get_db()
        call_data = CallCreate(
            caller_number=channel.get("caller", {}).get("number", "Unknown"),
            called_number=target_extension,
            operator_id=decision.get("operator_id"),
            channel_id=channel_id,
            start_time=datetime.utcnow(),
            status=CallStatus.RINGING,
            call_type="direct"
        )
        
        call = await db.create_call(call_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫
        self.active_calls[channel_id] = {
            "call_id": call.id,
            "operator_id": decision.get("operator_id"),
            "call_type": "direct",
            "routing_decision": decision
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É Asterisk –¥–ª—è –∑–≤–æ–Ω–∫–∞
        if self.ari_client:
            try:
                await self.ari_client.originate_call(target_extension)
            except Exception as e:
                logger.error(f"Failed to originate call to {target_extension}: {e}")
    
    async def _execute_queue_routing(self, decision: Dict[str, Any], channel: Dict[str, Any]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å"""
        queue_name = decision.get("queue_name")
        channel_id = channel.get("id")
        
        logger.info(f"üìã Routing to queue: {queue_name}")
        
        # –ó–¥–µ—Å—å –º—ã –ù–ï —Å–æ–∑–¥–∞–µ–º –∑–≤–æ–Ω–æ–∫ –≤ –ë–î, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç QueueCallerJoin
        # –¢–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–≤—è–∑–∏
        self.active_calls[channel_id] = {
            "queue_name": queue_name,
            "call_type": "queue",
            "routing_decision": decision,
            "caller_number": channel.get("caller", {}).get("number", "Unknown"),
            "start_time": datetime.utcnow()
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –æ—á–µ—Ä–µ–¥—å —á–µ—Ä–µ–∑ ARI
        if self.ari_client:
            try:
                # –í—ã—Ö–æ–¥–∏–º –∏–∑ Stasis –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ dialplan —Å –æ—á–µ—Ä–µ–¥—å—é
                await self.ari_client.send_channel_to_queue(channel_id, queue_name)
            except Exception as e:
                logger.error(f"Failed to route to queue {queue_name}: {e}")
    
    async def _execute_ivr(self, decision: Dict[str, Any], channel: Dict[str, Any], ivr_type: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ IVR"""
        channel_id = channel.get("id")
        
        logger.info(f"üéµ Playing IVR: {ivr_type}")
        
        # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        ivr_files = {
            "afterhours": "afterhours-message",
            "no_operators": "all-operators-busy"
        }
        
        sound_file = ivr_files.get(ivr_type, "generic-message")
        
        if self.ari_client:
            try:
                await self.ari_client.play_sound(channel_id, sound_file)
            except Exception as e:
                logger.error(f"Failed to play IVR {ivr_type}: {e}")
    
    async def _execute_hangup(self, channel: Dict[str, Any], reason: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞"""
        channel_id = channel.get("id")
        
        logger.info(f"üì¥ Hanging up call: {reason}")
        
        if self.ari_client:
            try:
                await self.ari_client.hangup_channel(channel_id)
            except Exception as e:
                logger.error(f"Failed to hangup channel {channel_id}: {e}")
    
    # === –û–ë–†–ê–ë–û–¢–ö–ê –û–ß–ï–†–ï–î–ï–ô (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏) ===
    
    async def _handle_queue_caller_join(self, event_data: Dict[str, Any]):
        """–ó–≤–æ–Ω—è—â–∏–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            caller_number = event_data.get("CallerIDNum")
            queue_name = event_data.get("Queue")
            uniqueid = event_data.get("Uniqueid")
            position = event_data.get("Position", 1)
            
            logger.info(f"üì• Caller {caller_number} joined queue {queue_name} at position {position}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ –≤ –ë–î
            db = get_db()
            call_data = CallCreate(
                caller_number=caller_number,
                queue_name=queue_name,
                channel_id=uniqueid,
                start_time=datetime.utcnow(),
                status=CallStatus.WAITING,
                call_type="queue",
                queue_position=position
            )
            
            call = await db.create_call(call_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            self.active_queue_entries[uniqueid] = {
                "call_id": call.id,
                "queue_name": queue_name,
                "caller_number": caller_number,
                "join_time": datetime.utcnow(),
                "position": position
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
            await call_stats_processor.process_queue_event("QueueCallerJoin", event_data)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–æ–≤
            await self.websocket_manager.broadcast_to_role("admin", {
                "type": "queue_caller_join",
                "data": {
                    "caller_number": caller_number,
                    "queue_name": queue_name,
                    "position": position,
                    "call_id": call.id
                }
            })
            
        except Exception as e:
            logger.error(f"Error handling QueueCallerJoin: {e}")
    
    async def _handle_queue_caller_leave(self, event_data: Dict[str, Any]):
        """–ó–≤–æ–Ω—è—â–∏–π –ø–æ–∫–∏–Ω—É–ª –æ—á–µ—Ä–µ–¥—å"""
        try:
            uniqueid = event_data.get("Uniqueid")
            reason = event_data.get("Reason")  # "timeout", "transfer", "hangup"
            
            if uniqueid not in self.active_queue_entries:
                logger.warning(f"Queue entry {uniqueid} not found in active entries")
                return
            
            entry = self.active_queue_entries[uniqueid]
            leave_time = datetime.utcnow()
            wait_time = int((leave_time - entry["join_time"]).total_seconds())
            
            logger.info(f"üì§ Caller left queue {entry['queue_name']}, reason: {reason}, wait: {wait_time}s")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞
            db = get_db()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ –ø—Ä–∏—á–∏–Ω–µ –≤—ã—Ö–æ–¥–∞
            if reason == "transfer":
                status = CallStatus.ANSWERED
            elif reason == "timeout":
                status = CallStatus.MISSED
            else:
                status = CallStatus.ABANDONED
            
            call_update = CallUpdate(
                status=status,
                end_time=leave_time,
                wait_time=wait_time,
                abandon_reason=reason if status == CallStatus.ABANDONED else None
            )
            
            await db.update_call(entry["call_id"], call_update)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            await call_stats_processor.process_queue_event("QueueCallerLeave", event_data)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            del self.active_queue_entries[uniqueid]
            
        except Exception as e:
            logger.error(f"Error handling QueueCallerLeave: {e}")
    
    async def _handle_queue_member_ringging(self, event_data: Dict[str, Any]):
        """–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –∑–≤–æ–Ω–æ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            interface = event_data.get("Interface")  # –Ω–∞–ø—Ä–∏–º–µ—Ä "PJSIP/0001"
            queue_name = event_data.get("Queue")
            caller_number = event_data.get("CallerIDNum")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º extension –∏–∑ interface
            extension = self._extract_extension_from_interface(interface)
            
            logger.info(f"üìû Member {extension} ringging for caller {caller_number} in queue {queue_name}")
            
            # –ù–∞—Ö–æ–¥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            operator = await self._find_operator_by_extension(extension)
            if operator:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ
                await self._notify_operator_incoming_call(operator.user_id, {
                    "caller_number": caller_number,
                    "queue_name": queue_name,
                    "interface": interface,
                    "type": "queue_call"
                })
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫)
            await call_stats_processor.process_queue_event("QueueMemberRingging", event_data)
            
        except Exception as e:
            logger.error(f"Error handling QueueMemberRingging: {e}")
    
    async def _handle_queue_member_pause(self, event_data: Dict[str, Any]):
        """–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É"""
        try:
            interface = event_data.get("Interface")
            reason = event_data.get("Reason", "")
            
            extension = self._extract_extension_from_interface(interface)
            
            logger.info(f"‚è∏Ô∏è Member {extension} paused, reason: {reason}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –ë–î
            operator = await self._find_operator_by_extension(extension)
            if operator:
                db = get_db()
                await db.update_operator_status(operator.id, "paused")
            
            await call_stats_processor.process_queue_event("QueueMemberPause", event_data)
            
        except Exception as e:
            logger.error(f"Error handling QueueMemberPause: {e}")
    
    async def _handle_queue_member_unpause(self, event_data: Dict[str, Any]):
        """–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–Ω—è—Ç —Å –ø–∞—É–∑—ã"""
        try:
            interface = event_data.get("Interface")
            
            extension = self._extract_extension_from_interface(interface)
            
            logger.info(f"‚ñ∂Ô∏è Member {extension} unpaused")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –ë–î
            operator = await self._find_operator_by_extension(extension)
            if operator:
                db = get_db()
                await db.update_operator_status(operator.id, "available")
            
            await call_stats_processor.process_queue_event("QueueMemberUnpause", event_data)
            
        except Exception as e:
            logger.error(f"Error handling QueueMemberUnpause: {e}")
    
    # === –û–ë–†–ê–ë–û–¢–ö–ê BRIDGE –°–û–ë–´–¢–ò–ô ===
    
    async def _handle_bridge_created(self, event_data: Dict[str, Any]):
        """–°–æ–∑–¥–∞–Ω bridge (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)"""
        bridge = event_data.get("bridge", {})
        logger.info(f"üåâ Bridge created: {bridge.get('id')}")
    
    async def _handle_channel_entered_bridge(self, event_data: Dict[str, Any]):
        """–ö–∞–Ω–∞–ª –≤–æ—à–µ–ª –≤ bridge - –∑–≤–æ–Ω–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω"""
        try:
            channel = event_data.get("channel", {})
            bridge = event_data.get("bridge", {})
            
            channel_id = channel.get("id")
            
            logger.info(f"üîó Channel {channel_id} entered bridge {bridge.get('id')}")
            
            # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∑–≤–æ–Ω–æ–∫ –±—ã–ª –æ—Ç–≤–µ—á–µ–Ω –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω
            await self._record_call_answered(channel_id)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            await call_stats_processor.process_queue_event("BridgeEnter", event_data)
            
        except Exception as e:
            logger.error(f"Error handling ChannelEnteredBridge: {e}")
    
    async def _handle_channel_left_bridge(self, event_data: Dict[str, Any]):
        """–ö–∞–Ω–∞–ª –ø–æ–∫–∏–Ω—É–ª bridge - –∑–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω"""
        try:
            channel = event_data.get("channel", {})
            bridge = event_data.get("bridge", {})
            
            channel_id = channel.get("id")
            
            logger.info(f"üîì Channel {channel_id} left bridge {bridge.get('id')}")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫
            await self._record_call_ended(channel_id)
            
        except Exception as e:
            logger.error(f"Error handling ChannelLeftBridge: {e}")
    
    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ê–ù–ê–õ–û–í ===
    
    async def _handle_channel_state_change(self, event_data: Dict[str, Any]):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        try:
            channel = event_data.get("channel", {})
            channel_id = channel.get("id")
            new_state = channel.get("state")
            
            logger.debug(f"üì± Channel {channel_id} state: {new_state}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if new_state == "Up" and channel_id in self.active_calls:
                # –ó–≤–æ–Ω–æ–∫ –æ—Ç–≤–µ—á–µ–Ω
                await self._record_call_answered(channel_id)
            elif new_state == "Down" and channel_id in self.active_calls:
                # –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
                await self._record_call_ended(channel_id)
            
        except Exception as e:
            logger.error(f"Error handling ChannelStateChange: {e}")
    
    async def _handle_stasis_end(self, event_data: Dict[str, Any]):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Stasis –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            channel = event_data.get("channel", {})
            channel_id = channel.get("id")
            
            logger.info(f"üìû Stasis ended for channel: {channel_id}")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
            if channel_id in self.active_calls:
                await self._record_call_ended(channel_id)
                
        except Exception as e:
            logger.error(f"Error handling StasisEnd: {e}")
    
    async def _handle_channel_destroyed(self, event_data: Dict[str, Any]):
        """–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
        channel = event_data.get("channel", {})
        channel_id = channel.get("id")
        
        logger.info(f"üóëÔ∏è Channel destroyed: {channel_id}")
        
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
        if channel_id in self.active_calls:
            del self.active_calls[channel_id]
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def _extract_extension_from_interface(self, interface: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ extension –∏–∑ interface (–Ω–∞–ø—Ä–∏–º–µ—Ä PJSIP/0001 -> 0001)"""
        if not interface:
            return "unknown"
        
        parts = interface.split("/")
        if len(parts) > 1:
            return parts[1].split("-")[0]  # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ -00000001
        
        return interface
    
    async def _find_operator_by_extension(self, extension: str):
        """–ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ extension"""
        try:
            db = get_db()
            operators = await db.get_operators()
            
            for operator in operators:
                if operator.extension == extension:
                    return operator
            
            return None
            
        except Exception as e:
            logger.error(f"Error finding operator by extension {extension}: {e}")
            return None
    
    async def _record_call_answered(self, channel_id: str):
        """–ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞"""
        try:
            if channel_id in self.active_calls:
                call_info = self.active_calls[channel_id]
                call_id = call_info.get("call_id")
                
                if call_id:
                    db = get_db()
                    call_update = CallUpdate(
                        status=CallStatus.ANSWERED,
                        answer_time=datetime.utcnow()
                    )
                    
                    await db.update_call(call_id, call_update)
                    call_info["status"] = "answered"
                    call_info["answer_time"] = datetime.utcnow()
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                    if "operator_id" in call_info:
                        await self._notify_operator_call_answered(call_info["operator_id"], call_info)
                        
        except Exception as e:
            logger.error(f"Error recording call answered: {e}")
    
    async def _record_call_ended(self, channel_id: str):
        """–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞"""
        try:
            if channel_id in self.active_calls:
                call_info = self.active_calls[channel_id]
                call_id = call_info.get("call_id")
                
                if call_id:
                    db = get_db()
                    end_time = datetime.utcnow()
                    talk_time = 0
                    
                    if "answer_time" in call_info:
                        talk_time = int((end_time - call_info["answer_time"]).total_seconds())
                    
                    call_update = CallUpdate(
                        status=CallStatus.COMPLETED,
                        end_time=end_time,
                        talk_time=talk_time
                    )
                    
                    await db.update_call(call_id, call_update)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                    if "operator_id" in call_info:
                        await self._notify_operator_call_ended(call_info["operator_id"], {
                            **call_info,
                            "end_time": end_time,
                            "talk_time": talk_time
                        })
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                del self.active_calls[channel_id]
                
        except Exception as e:
            logger.error(f"Error recording call ended: {e}")
    
    async def _notify_operator_incoming_call(self, user_id: str, call_data: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ"""
        await self.websocket_manager.send_to_user(user_id, {
            "type": "incoming_call",
            "data": call_data,
            "timestamp": datetime.utcnow().isoformat()
        })
    
    async def _notify_operator_call_answered(self, operator_id: str, call_info: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–º –∑–≤–æ–Ω–∫–µ"""
        db = get_db()
        operator = await db.operators.find_one({"id": operator_id})
        if operator:
            await self.websocket_manager.send_to_user(operator["user_id"], {
                "type": "call_answered",
                "data": call_info,
                "timestamp": datetime.utcnow().isoformat()
            })
    
    async def _notify_operator_call_ended(self, operator_id: str, call_info: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º –∑–≤–æ–Ω–∫–µ"""
        db = get_db()
        operator = await db.operators.find_one({"id": operator_id})
        if operator:
            await self.websocket_manager.send_to_user(operator["user_id"], {
                "type": "call_ended",
                "data": call_info,
                "timestamp": datetime.utcnow().isoformat()
            })
    
    async def stop_listening(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
        self.running = False
        if self.websocket:
            await self.websocket.close()
        logger.info("Stopped listening to Asterisk events")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
_event_handler: Optional[AsteriskEventHandler] = None

async def initialize_event_handler(ari_client):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
    global _event_handler
    _event_handler = AsteriskEventHandler(ari_client)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(_event_handler.start_listening())
    
    logger.info("‚úÖ Asterisk event handler initialized with call flow logic")

def get_event_handler() -> Optional[AsteriskEventHandler]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
    return _event_handler