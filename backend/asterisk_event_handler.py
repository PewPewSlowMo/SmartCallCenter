import asyncio
import json
import logging
import aiohttp
from datetime import datetime
from typing import Dict, Any, Optional
from websockets import connect, ConnectionClosed
import websockets

from models import Call, CallCreate, CallUpdate, CallStatus, OperatorStatus
from database import DatabaseManager
from db import get_db
from websocket_manager import get_websocket_manager

logger = logging.getLogger(__name__)

class AsteriskEventHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç Asterisk ARI —á–µ—Ä–µ–∑ WebSocket"""
    
    def __init__(self, ari_client):
        self.ari_client = ari_client
        self.websocket = None
        self.running = False
        self.active_calls: Dict[str, Dict[str, Any]] = {}  # channel_id -> call_data
        self.websocket_manager = get_websocket_manager()
        
    async def start_listening(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π Asterisk ARI"""
        if not self.ari_client or not self.ari_client.connected:
            logger.error("ARI client not connected, cannot start event listening")
            return False
            
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º WebSocket URL –¥–ª—è Asterisk ARI
            ws_url = f"ws://{self.ari_client.host}:{self.ari_client.port}/ari/events"
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            auth_params = f"api_key={self.ari_client.username}:{self.ari_client.password}&app=SmartCallCenter"
            full_url = f"{ws_url}?{auth_params}"
            
            logger.info(f"Connecting to Asterisk WebSocket: {ws_url}")
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
            self.websocket = await connect(full_url)
            self.running = True
            
            logger.info("‚úÖ Connected to Asterisk ARI WebSocket - listening for events...")
            
            # –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            await self._listen_for_events()
            
        except Exception as e:
            logger.error(f"Failed to connect to Asterisk WebSocket: {e}")
            return False
    
    async def _listen_for_events(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
        try:
            while self.running and self.websocket:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç Asterisk
                    message = await self.websocket.recv()
                    event_data = json.loads(message)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                    await self._handle_event(event_data)
                    
                except ConnectionClosed:
                    logger.warning("WebSocket connection to Asterisk closed")
                    break
                except json.JSONDecodeError as e:
                    logger.error(f"Invalid JSON from Asterisk: {e}")
                except Exception as e:
                    logger.error(f"Error processing Asterisk event: {e}")
                    
        except Exception as e:
            logger.error(f"Fatal error in event listening loop: {e}")
        finally:
            self.running = False
            if self.websocket:
                await self.websocket.close()
    
    async def _handle_event(self, event_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –æ—Ç Asterisk"""
        event_type = event_data.get("type")
        
        logger.debug(f"Received Asterisk event: {event_type}")
        
        if event_type == "StasisStart":
            await self._handle_stasis_start(event_data)
        elif event_type == "ChannelStateChange":
            await self._handle_channel_state_change(event_data)
        elif event_type == "StasisEnd":
            await self._handle_stasis_end(event_data)
        elif event_type == "ChannelDestroyed":
            await self._handle_channel_destroyed(event_data)
        elif event_type == "BridgeCreated":
            await self._handle_bridge_created(event_data)
        elif event_type == "ChannelEnteredBridge":
            await self._handle_channel_entered_bridge(event_data)
        elif event_type == "ChannelLeftBridge":
            await self._handle_channel_left_bridge(event_data)
        else:
            logger.debug(f"Unhandled event type: {event_type}")
    
    async def _handle_stasis_start(self, event_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ Stasis –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫)"""
        try:
            channel = event_data.get("channel", {})
            channel_id = channel.get("id")
            caller_number = channel.get("caller", {}).get("number", "Unknown")
            connected_number = channel.get("connected", {}).get("number", "")
            
            logger.info(f"üîî –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö: {caller_number} -> {connected_number}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π extension
            target_extension = self._extract_extension_from_channel(channel)
            
            # –ò—â–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ extension
            db = get_db()
            operator = await self._find_operator_by_extension(target_extension)
            
            if not operator:
                logger.warning(f"No operator found for extension {target_extension}")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ –≤ –ë–î
            call_data = CallCreate(
                caller_number=caller_number,
                called_number=connected_number or target_extension,
                operator_id=operator.id,
                channel_id=channel_id,
                start_time=datetime.utcnow(),
                status=CallStatus.RINGING
            )
            
            call = await db.create_call(call_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫
            self.active_calls[channel_id] = {
                "call_id": call.id,
                "operator_id": operator.id,
                "caller_number": caller_number,
                "target_extension": target_extension,
                "start_time": datetime.utcnow(),
                "status": "ringing"
            }
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ WebSocket
            await self._notify_operator_incoming_call(operator.user_id, {
                "call_id": call.id,
                "caller_number": caller_number,
                "channel_id": channel_id,
                "start_time": call.start_time.isoformat(),
                "status": "ringing"
            })
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤/–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            await self.websocket_manager.broadcast_to_role("admin", {
                "type": "incoming_call",
                "data": {
                    "caller_number": caller_number,
                    "operator_extension": target_extension,
                    "operator_id": operator.id,
                    "call_id": call.id
                }
            })
            
            logger.info(f"‚úÖ Call recorded in database: {call.id}")
            
        except Exception as e:
            logger.error(f"Error handling StasisStart: {e}")
    
    async def _handle_channel_state_change(self, event_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        try:
            channel = event_data.get("channel", {})
            channel_id = channel.get("id")
            new_state = channel.get("state")
            
            if channel_id not in self.active_calls:
                return
            
            call_info = self.active_calls[channel_id]
            call_id = call_info["call_id"]
            
            logger.info(f"üì± Call {call_id} state changed to: {new_state}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞ –≤ –ë–î
            db = get_db()
            
            if new_state == "Up":
                # –ó–≤–æ–Ω–æ–∫ –æ—Ç–≤–µ—á–µ–Ω
                call_update = CallUpdate(
                    status=CallStatus.ANSWERED,
                    answer_time=datetime.utcnow()
                )
                await db.update_call(call_id, call_update)
                
                call_info["status"] = "answered"
                call_info["answer_time"] = datetime.utcnow()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                await self._notify_operator_call_answered(call_info["operator_id"], call_info)
                
            elif new_state == "Down":
                # –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
                end_time = datetime.utcnow()
                talk_time = 0
                
                if "answer_time" in call_info:
                    talk_time = int((end_time - call_info["answer_time"]).total_seconds())
                
                call_update = CallUpdate(
                    status=CallStatus.COMPLETED,
                    end_time=end_time,
                    talk_time=talk_time
                )
                await db.update_call(call_id, call_update)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
                del self.active_calls[channel_id]
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                await self._notify_operator_call_ended(call_info["operator_id"], {
                    **call_info,
                    "end_time": end_time,
                    "talk_time": talk_time
                })
                
                logger.info(f"‚úÖ Call {call_id} completed. Duration: {talk_time}s")
            
        except Exception as e:
            logger.error(f"Error handling ChannelStateChange: {e}")
    
    async def _handle_stasis_end(self, event_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Stasis –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            channel = event_data.get("channel", {})
            channel_id = channel.get("id")
            
            if channel_id in self.active_calls:
                call_info = self.active_calls[channel_id]
                logger.info(f"üìû Stasis ended for call: {call_info['call_id']}")
                
                # –ï—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π
                if call_info["status"] == "ringing":
                    db = get_db()
                    call_update = CallUpdate(
                        status=CallStatus.MISSED,
                        end_time=datetime.utcnow()
                    )
                    await db.update_call(call_info["call_id"], call_update)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–º –∑–≤–æ–Ω–∫–µ
                    await self._notify_operator_call_missed(call_info["operator_id"], call_info)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                del self.active_calls[channel_id]
                
        except Exception as e:
            logger.error(f"Error handling StasisEnd: {e}")
    
    async def _handle_channel_destroyed(self, event_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        channel = event_data.get("channel", {})
        channel_id = channel.get("id")
        
        if channel_id in self.active_calls:
            logger.info(f"üóëÔ∏è Channel destroyed: {channel_id}")
            del self.active_calls[channel_id]
    
    async def _handle_bridge_created(self, event_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bridge (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)"""
        bridge = event_data.get("bridge", {})
        logger.info(f"üåâ Bridge created: {bridge.get('id')}")
    
    async def _handle_channel_entered_bridge(self, event_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∫–∞–Ω–∞–ª–∞ –≤ bridge"""
        channel = event_data.get("channel", {})
        bridge = event_data.get("bridge", {})
        logger.info(f"üîó Channel {channel.get('id')} entered bridge {bridge.get('id')}")
    
    async def _handle_channel_left_bridge(self, event_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∫–∞–Ω–∞–ª–∞ –∏–∑ bridge"""
        channel = event_data.get("channel", {})
        bridge = event_data.get("bridge", {})
        logger.info(f"üîì Channel {channel.get('id')} left bridge {bridge.get('id')}")
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _extract_extension_from_channel(self, channel: Dict[str, Any]) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ extension –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞"""
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å extension –∏–∑ dialplan
        dialplan = channel.get("dialplan", {})
        extension = dialplan.get("exten", "")
        
        if extension:
            return extension
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ connected number
        connected = channel.get("connected", {})
        number = connected.get("number", "")
        
        if number:
            return number
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
        name = channel.get("name", "")
        if "PJSIP" in name:
            parts = name.split("/")
            if len(parts) > 1:
                return parts[1].split("-")[0]
        
        return "unknown"
    
    async def _find_operator_by_extension(self, extension: str):
        """–ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ extension"""
        try:
            db = get_db()
            operators = await db.get_operators()
            
            for operator in operators:
                if operator.extension == extension:
                    return operator
            
            return None
            
        except Exception as e:
            logger.error(f"Error finding operator by extension {extension}: {e}")
            return None
    
    async def _notify_operator_incoming_call(self, user_id: str, call_data: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ"""
        await self.websocket_manager.send_to_user(user_id, {
            "type": "incoming_call",
            "data": call_data,
            "timestamp": datetime.utcnow().isoformat()
        })
    
    async def _notify_operator_call_answered(self, operator_id: str, call_info: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–º –∑–≤–æ–Ω–∫–µ"""
        # –ü–æ–ª—É—á–∞–µ–º user_id –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        db = get_db()
        operator = await db.operators.find_one({"id": operator_id})
        if operator:
            await self.websocket_manager.send_to_user(operator["user_id"], {
                "type": "call_answered",
                "data": call_info,
                "timestamp": datetime.utcnow().isoformat()
            })
    
    async def _notify_operator_call_ended(self, operator_id: str, call_info: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º –∑–≤–æ–Ω–∫–µ"""
        db = get_db()
        operator = await db.operators.find_one({"id": operator_id})
        if operator:
            await self.websocket_manager.send_to_user(operator["user_id"], {
                "type": "call_ended",
                "data": call_info,
                "timestamp": datetime.utcnow().isoformat()
            })
    
    async def _notify_operator_call_missed(self, operator_id: str, call_info: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–º –∑–≤–æ–Ω–∫–µ"""
        db = get_db()
        operator = await db.operators.find_one({"id": operator_id})
        if operator:
            await self.websocket_manager.send_to_user(operator["user_id"], {
                "type": "call_missed",
                "data": call_info,
                "timestamp": datetime.utcnow().isoformat()
            })
    
    async def stop_listening(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
        self.running = False
        if self.websocket:
            await self.websocket.close()
        logger.info("Stopped listening to Asterisk events")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
_event_handler: Optional[AsteriskEventHandler] = None

async def initialize_event_handler(ari_client):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
    global _event_handler
    _event_handler = AsteriskEventHandler(ari_client)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(_event_handler.start_listening())
    
    logger.info("‚úÖ Asterisk event handler initialized")

def get_event_handler() -> Optional[AsteriskEventHandler]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
    return _event_handler