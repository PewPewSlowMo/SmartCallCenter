from fastapi import APIRouter, HTTPException, status, Depends
from typing import Dict, Any, List
import logging
from datetime import datetime

from models import User, APIResponse, AsteriskConfig
from database import DatabaseManager
from auth import require_admin
from db import get_db

router = APIRouter(prefix="/setup", tags=["Setup Wizard"])
logger = logging.getLogger(__name__)

@router.post("/asterisk/scan", response_model=Dict[str, Any])
async def scan_asterisk_configuration(
    asterisk_config: AsteriskConfig,
    current_user: User = Depends(require_admin),
    db: DatabaseManager = Depends(get_db)
):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Asterisk –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        logger.info("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Asterisk...")
        
        from asterisk_client import AsteriskARIClient
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        ari_client = AsteriskARIClient(
            host=asterisk_config.host,
            port=asterisk_config.port,
            username=asterisk_config.username,
            password=asterisk_config.password,
            use_ssl=asterisk_config.protocol == "ARI_SSL"
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        connection_result = await ari_client.test_connection()
        if not connection_result["success"]:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Asterisk: {connection_result['error']}"
            )
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        connected = await ari_client.connect()
        if not connected:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Asterisk"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º endpoints (extensions)
        endpoints = await ari_client.get_endpoints()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        device_states = await ari_client.get_device_states()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã
        channels = await ari_client.get_channels()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        system_info = connection_result
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º extensions
        discovered_extensions = []
        for endpoint in endpoints:
            extension = endpoint.get("resource", "")
            technology = endpoint.get("technology", "")
            state = endpoint.get("state", "UNKNOWN")
            
            # –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ device state
            device_state = "UNKNOWN"
            for device in device_states:
                if extension in device.get("name", ""):
                    device_state = device.get("state", "UNKNOWN")
                    break
            
            discovered_extensions.append({
                "extension": extension,
                "technology": technology,
                "endpoint_state": state,
                "device_state": device_state,
                "contact_status": endpoint.get("contacts", [{}])[0].get("contact_status", "Unknown") if endpoint.get("contacts") else "Unknown",
                "contact_uri": endpoint.get("contacts", [{}])[0].get("uri", "") if endpoint.get("contacts") else "",
                "suggested_operator": True if extension.isdigit() else False,
                "existing_operator": await check_existing_operator(db, extension)
            })
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        discovered_queues = []
        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω Asterisk
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await ari_client.disconnect()
        
        return {
            "success": True,
            "asterisk_info": {
                "version": system_info.get("asterisk_version"),
                "system": system_info.get("system"),
                "host": asterisk_config.host,
                "port": asterisk_config.port,
                "mode": system_info.get("mode", "Unknown")
            },
            "discovered": {
                "extensions": discovered_extensions,
                "queues": discovered_queues,
                "active_channels": len(channels)
            },
            "statistics": {
                "total_extensions": len(discovered_extensions),
                "available_extensions": len([ext for ext in discovered_extensions if ext["device_state"] in ["NOT_INUSE", "INUSE"]]),
                "offline_extensions": len([ext for ext in discovered_extensions if ext["device_state"] == "UNAVAILABLE"]),
                "suggested_operators": len([ext for ext in discovered_extensions if ext["suggested_operator"]]),
                "existing_operators": len([ext for ext in discovered_extensions if ext["existing_operator"]])
            },
            "recommendations": generate_setup_recommendations(discovered_extensions, discovered_queues),
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Error scanning Asterisk configuration: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}"
        )

@router.post("/operators/migrate", response_model=APIResponse)
async def migrate_operators_from_asterisk(
    migration_data: Dict[str, Any],
    current_user: User = Depends(require_admin),
    db: DatabaseManager = Depends(get_db)
):
    """–ú–∏–≥—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ Asterisk extensions"""
    try:
        selected_extensions = migration_data.get("extensions", [])
        default_group_id = migration_data.get("default_group_id")
        default_skills = migration_data.get("default_skills", ["general"])
        
        created_operators = []
        skipped_operators = []
        errors = []
        
        from auth import get_password_hash
        from models import UserCreate, UserRole, OperatorCreate
        
        for ext_data in selected_extensions:
            extension = ext_data.get("extension")
            username = ext_data.get("username", f"operator_{extension}")
            name = ext_data.get("name", f"–û–ø–µ—Ä–∞—Ç–æ—Ä {extension}")
            email = ext_data.get("email", f"operator_{extension}@callcenter.com")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                existing_user = await db.get_user_by_username(username)
                if existing_user:
                    skipped_operators.append({
                        "extension": extension,
                        "username": username,
                        "reason": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                    })
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å extension
                existing_operator = await db.operators.find_one({"extension": extension})
                if existing_operator:
                    skipped_operators.append({
                        "extension": extension,
                        "username": username,
                        "reason": "Extension —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –¥—Ä—É–≥–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"
                    })
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = UserCreate(
                    username=username,
                    email=email,
                    name=name,
                    password="changeme123",  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
                    role=UserRole.OPERATOR,
                    group_id=default_group_id
                )
                
                user = await db.create_user(user_data)
                
                # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                operator_data = OperatorCreate(
                    user_id=user.id,
                    extension=extension,
                    group_id=default_group_id,
                    skills=default_skills,
                    max_concurrent_calls=1
                )
                
                operator = await db.create_operator(operator_data)
                
                created_operators.append({
                    "user_id": user.id,
                    "operator_id": operator.id,
                    "username": username,
                    "extension": extension,
                    "name": name,
                    "email": email,
                    "temporary_password": "changeme123"
                })
                
                logger.info(f"Created operator: {username} with extension {extension}")
                
            except Exception as e:
                logger.error(f"Error creating operator for extension {extension}: {e}")
                errors.append({
                    "extension": extension,
                    "username": username,
                    "error": str(e)
                })
        
        return APIResponse(
            success=True,
            message=f"–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Å–æ–∑–¥–∞–Ω–æ {len(created_operators)} –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤",
            data={
                "created": created_operators,
                "skipped": skipped_operators,
                "errors": errors,
                "summary": {
                    "total_processed": len(selected_extensions),
                    "created_count": len(created_operators),
                    "skipped_count": len(skipped_operators),
                    "error_count": len(errors)
                }
            }
        )
        
    except Exception as e:
        logger.error(f"Error migrating operators: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {str(e)}"
        )

@router.post("/queues/create", response_model=APIResponse)
async def create_queues_from_asterisk(
    queue_data: Dict[str, Any],
    current_user: User = Depends(require_admin),
    db: DatabaseManager = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö Asterisk"""
    try:
        suggested_queues = queue_data.get("queues", [])
        
        created_queues = []
        skipped_queues = []
        
        from models import QueueCreate
        
        for queue_info in suggested_queues:
            queue_name = queue_info.get("name")
            description = queue_info.get("description", f"–û—á–µ—Ä–µ–¥—å {queue_name}")
            max_wait_time = queue_info.get("max_wait_time", 300)
            priority = queue_info.get("priority", 1)
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—á–µ—Ä–µ–¥—å
                existing_queue = await db.queues.find_one({"name": queue_name})
                if existing_queue:
                    skipped_queues.append({
                        "name": queue_name,
                        "reason": "–û—á–µ—Ä–µ–¥—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                    })
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
                queue_create_data = QueueCreate(
                    name=queue_name,
                    description=description,
                    max_wait_time=max_wait_time,
                    priority=priority
                )
                
                queue = await db.create_queue(queue_create_data)
                
                created_queues.append({
                    "id": queue.id,
                    "name": queue.name,
                    "description": queue.description,
                    "max_wait_time": queue.max_wait_time,
                    "priority": queue.priority
                })
                
                logger.info(f"Created queue: {queue_name}")
                
            except Exception as e:
                logger.error(f"Error creating queue {queue_name}: {e}")
                skipped_queues.append({
                    "name": queue_name,
                    "reason": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {str(e)}"
                })
        
        return APIResponse(
            success=True,
            message=f"–°–æ–∑–¥–∞–Ω–æ –æ—á–µ—Ä–µ–¥–µ–π: {len(created_queues)}",
            data={
                "created": created_queues,
                "skipped": skipped_queues,
                "summary": {
                    "total_processed": len(suggested_queues),
                    "created_count": len(created_queues),
                    "skipped_count": len(skipped_queues)
                }
            }
        )
        
    except Exception as e:
        logger.error(f"Error creating queues: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π: {str(e)}"
        )

@router.post("/complete", response_model=APIResponse)
async def complete_setup_wizard(
    setup_data: Dict[str, Any],
    current_user: User = Depends(require_admin),
    db: DatabaseManager = Depends(get_db)
):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Asterisk
        asterisk_config = setup_data.get("asterisk_config")
        
        if asterisk_config:
            from models import SystemSettingsUpdate, AsteriskConfig
            
            settings_update = SystemSettingsUpdate(
                asterisk_config=AsteriskConfig(**asterisk_config)
            )
            
            await db.update_system_settings(settings_update, current_user.id)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ARI –∫–ª–∏–µ–Ω—Ç–∞
            try:
                from asterisk_client import initialize_ari_client
                success = await initialize_ari_client(asterisk_config)
                if success:
                    logger.info("ARI client initialized successfully after setup completion")
                else:
                    logger.warning("Failed to initialize ARI client after setup completion")
            except Exception as e:
                logger.error(f"Error initializing ARI client: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        setup_completion = {
            "completed_at": datetime.utcnow(),
            "completed_by": current_user.id,
            "setup_data": setup_data,
            "version": "1.0.0"
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é)
        await db.db.setup_history.insert_one(setup_completion)
        
        return APIResponse(
            success=True,
            message="–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω",
            data={
                "setup_completed": True,
                "timestamp": setup_completion["completed_at"],
                "next_steps": [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Asterisk –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏",
                    "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É",
                    "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—á–µ—Ä–µ–¥–∏ –≤ Asterisk –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤",
                    "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–≤–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
                ]
            }
        )
        
    except Exception as e:
        logger.error(f"Error completing setup wizard: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}"
        )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def check_existing_operator(db: DatabaseManager, extension: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º extension"""
    try:
        existing = await db.operators.find_one({"extension": extension})
        return existing is not None
    except:
        return False

def generate_setup_recommendations(extensions: List[Dict], queues: List[Dict]) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    recommendations = []
    
    if not extensions:
        recommendations.append("üìû –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ extension. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Asterisk.")
    else:
        available_count = len([ext for ext in extensions if ext["device_state"] in ["NOT_INUSE", "INUSE"]])
        if available_count == 0:
            recommendations.append("‚ö†Ô∏è –í—Å–µ extensions –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ UNAVAILABLE. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ SIP —É—Å—Ç—Ä–æ–π—Å—Ç–≤.")
        else:
            recommendations.append(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {available_count} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö extensions –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
    
    if not queues:
        recommendations.append("üìã –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—á–µ—Ä–µ–¥–µ–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤.")
    
    suggested_operators = len([ext for ext in extensions if ext["suggested_operator"]])
    if suggested_operators > 0:
        recommendations.append(f"üë• –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å {suggested_operators} –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö extensions.")
    
    recommendations.append("üîß –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö –≥—Ä—É–ø–ø—ã –∏ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤.")
    recommendations.append("üìä –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ Asterisk –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤.")
    
    return recommendations