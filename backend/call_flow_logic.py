"""
Smart Call Center - Call Processing Logic
=========================================

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤.
–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ª–æ–≥–∏–∫–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –∑–¥–µ—Å—å, –∞ –Ω–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ.

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (Asterisk Queue + ARI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ + Stasis —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
"""

from enum import Enum
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

class CallType(Enum):
    """–¢–∏–ø—ã –∑–≤–æ–Ω–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    INCOMING_QUEUE = "incoming_queue"      # –í—Ö–æ–¥—è—â–∏–π –≤ –æ—á–µ—Ä–µ–¥—å
    INCOMING_DIRECT = "incoming_direct"    # –í—Ö–æ–¥—è—â–∏–π –Ω–∞–ø—Ä—è–º—É—é –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    OUTGOING = "outgoing"                  # –ò—Å—Ö–æ–¥—è—â–∏–π
    INTERNAL = "internal"                  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏

class CallProcessingStrategy(Enum):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤"""
    ASTERISK_QUEUE = "asterisk_queue"      # –ß–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ Asterisk
    STASIS_CUSTOM = "stasis_custom"        # –ß–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—É—é –ª–æ–≥–∏–∫—É Stasis
    HYBRID = "hybrid"                      # –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥

class CallFlowLogic:
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤"""
    
    def __init__(self):
        self.config = CallFlowConfig()
    
    async def determine_call_routing(self, call_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
        
        –õ–æ–≥–∏–∫–∞:
        1. –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ (DID)
        2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        4. –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        5. –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞
        """
        
        caller_number = call_data.get("caller_number")
        called_number = call_data.get("called_number") 
        call_time = datetime.utcnow()
        
        logger.info(f"üéØ Determining routing for {caller_number} -> {called_number}")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if not self._is_business_hours(call_time):
            return self._create_routing_decision(
                action="ivr_afterhours",
                message="–ü–æ—Å–ª–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤",
                strategy=CallProcessingStrategy.STASIS_CUSTOM
            )
        
        # 2. –ê–Ω–∞–ª–∏–∑ –Ω–æ–º–µ—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        target_type = self._analyze_target_number(called_number)
        
        if target_type == "direct_extension":
            # –ü—Ä—è–º–æ–π –∑–≤–æ–Ω–æ–∫ –Ω–∞ extension –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            return await self._route_direct_call(call_data)
        
        elif target_type == "queue_number":
            # –ó–≤–æ–Ω–æ–∫ –≤ –æ—á–µ—Ä–µ–¥—å
            return await self._route_queue_call(call_data)
        
        elif target_type == "service_number":
            # –°–µ—Ä–≤–∏—Å–Ω—ã–π –Ω–æ–º–µ—Ä (IVR, –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∏ —Ç.–¥.)
            return await self._route_service_call(call_data)
        
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä - –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å
            return await self._route_default_queue(call_data)
    
    async def _route_direct_call(self, call_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø—Ä—è–º–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"""
        
        called_number = call_data.get("called_number")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        operator = await self._find_operator_by_extension(called_number)
        
        if not operator:
            logger.warning(f"‚ùå Operator not found for extension {called_number}")
            return self._create_routing_decision(
                action="dial_unavailable",
                message=f"–û–ø–µ—Ä–∞—Ç–æ—Ä {called_number} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                fallback_queue="support"
            )
        
        if not await self._is_operator_available(operator):
            logger.info(f"üìµ Operator {called_number} unavailable, routing to queue")
            return self._create_routing_decision(
                action="queue_fallback", 
                queue_name="support",
                reason="operator_unavailable",
                original_target=called_number
            )
        
        # –û–ø–µ—Ä–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω - –∑–≤–æ–Ω–∏–º –Ω–∞–ø—Ä—è–º—É—é
        return self._create_routing_decision(
            action="dial_direct",
            target_extension=called_number,
            operator_id=operator.id,
            strategy=CallProcessingStrategy.STASIS_CUSTOM
        )
    
    async def _route_queue_call(self, call_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å"""
        
        called_number = call_data.get("called_number")
        queue_name = self._map_number_to_queue(called_number)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏
        available_operators = await self._get_available_queue_operators(queue_name)
        
        if not available_operators:
            logger.warning(f"‚ö†Ô∏è No operators available in queue {queue_name}")
            return self._create_routing_decision(
                action="ivr_no_operators",
                message="–í—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∑–∞–Ω—è—Ç—ã",
                estimated_wait_time=await self._estimate_wait_time(queue_name)
            )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ—á–µ—Ä–µ–¥–∏
        queue_strategy = await self._get_queue_strategy(queue_name)
        
        return self._create_routing_decision(
            action="route_to_queue",
            queue_name=queue_name,
            strategy=CallProcessingStrategy.ASTERISK_QUEUE,
            queue_strategy=queue_strategy,
            available_operators=len(available_operators)
        )
    
    async def _route_service_call(self, call_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞"""
        
        called_number = call_data.get("called_number")
        service_type = self._determine_service_type(called_number)
        
        return self._create_routing_decision(
            action=f"service_{service_type}",
            strategy=CallProcessingStrategy.STASIS_CUSTOM
        )
    
    async def _route_default_queue(self, call_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        
        default_queue = self.config.DEFAULT_QUEUE
        
        return self._create_routing_decision(
            action="route_to_queue",
            queue_name=default_queue,
            strategy=CallProcessingStrategy.ASTERISK_QUEUE,
            reason="default_routing"
        )
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _is_business_hours(self, call_time: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤"""
        weekday = call_time.weekday()  # 0=Monday, 6=Sunday
        hour = call_time.hour
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã: –ü–Ω-–ü—Ç 9:00-18:00
        if weekday >= 5:  # –°–±, –í—Å
            return False
        
        if hour < self.config.BUSINESS_START_HOUR or hour >= self.config.BUSINESS_END_HOUR:
            return False
        
        return True
    
    def _analyze_target_number(self, called_number: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –Ω–æ–º–µ—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
        
        if not called_number:
            return "unknown"
        
        # –ü—Ä—è–º—ã–µ extensions –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–æ–±—ã—á–Ω–æ 4-–∑–Ω–∞—á–Ω—ã–µ)
        if called_number.isdigit() and len(called_number) == 4:
            if called_number.startswith(('0', '1', '2')):
                return "direct_extension"
        
        # –ù–æ–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–µ–π (–æ–±—ã—á–Ω–æ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º)
        if called_number in self.config.QUEUE_NUMBERS:
            return "queue_number"
        
        # –°–µ—Ä–≤–∏—Å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
        if called_number in self.config.SERVICE_NUMBERS:
            return "service_number"
        
        return "unknown"
    
    def _map_number_to_queue(self, called_number: str) -> str:
        """–ú–∞–ø–ø–∏–Ω–≥ –Ω–æ–º–µ—Ä–∞ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏"""
        mapping = {
            "100": "support",
            "101": "sales", 
            "102": "technical",
            "200": "vip"
        }
        return mapping.get(called_number, self.config.DEFAULT_QUEUE)
    
    def _determine_service_type(self, called_number: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        services = {
            "500": "ivr_main",
            "501": "voicemail",
            "502": "callback_request"
        }
        return services.get(called_number, "ivr_main")
    
    def _create_routing_decision(self, **kwargs) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"""
        decision = {
            "timestamp": datetime.utcnow().isoformat(),
            "decision_id": f"routing_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}",
            **kwargs
        }
        
        logger.info(f"üìã Routing decision: {decision['action']}")
        return decision
    
    async def _find_operator_by_extension(self, extension: str):
        """–ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ extension"""
        # –ó–∞–≥–ª—É—à–∫–∞ - –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î
        pass
    
    async def _is_operator_available(self, operator) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        # –ó–∞–≥–ª—É—à–∫–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞, —Ç–µ–∫—É—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –∏ —Ç.–¥.
        pass
    
    async def _get_available_queue_operators(self, queue_name: str) -> List:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏"""
        # –ó–∞–≥–ª—É—à–∫–∞ - –∑–∞–ø—Ä–æ—Å –∫ Asterisk Queue
        pass
    
    async def _estimate_wait_time(self, queue_name: str) -> int:
        """–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏"""
        # –ó–∞–≥–ª—É—à–∫–∞ - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
        return 180  # 3 –º–∏–Ω—É—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    async def _get_queue_strategy(self, queue_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—á–µ—Ä–µ–¥–∏"""
        strategies = {
            "support": "leastrecent",
            "sales": "fewestcalls", 
            "technical": "linear",
            "vip": "ringall"
        }
        return strategies.get(queue_name, "leastrecent")

class CallStatisticsProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–≤–æ–Ω–∫–æ–≤"""
    
    async def process_queue_event(self, event_type: str, event_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        
        if event_type == "QueueCallerJoin":
            await self._handle_caller_join(event_data)
        
        elif event_type == "QueueCallerLeave":
            await self._handle_caller_leave(event_data)
        
        elif event_type == "QueueMemberRingging":
            await self._handle_member_ringging(event_data)
        
        elif event_type == "BridgeEnter":
            await self._handle_bridge_enter(event_data)
        
        elif event_type == "QueueMemberPause":
            await self._handle_member_pause(event_data)
        
        elif event_type == "QueueMemberUnpause":
            await self._handle_member_unpause(event_data)
    
    async def _handle_caller_join(self, event_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∑–≤–æ–Ω—è—â–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å"""
        logger.info(f"üì• Caller joined queue: {event_data}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
        queue_entry = {
            "caller_number": event_data.get("CallerIDNum"),
            "queue_name": event_data.get("Queue"),
            "join_time": datetime.utcnow(),
            "position": event_data.get("Position"),
            "status": "waiting"
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        await self._save_queue_entry(queue_entry)
    
    async def _handle_caller_leave(self, event_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–≤–æ–Ω—è—â–µ–≥–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        logger.info(f"üì§ Caller left queue: {event_data}")
        
        reason = event_data.get("Reason")  # "timeout", "transfer", "hangup"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await self._update_queue_entry_result(
            caller_number=event_data.get("CallerIDNum"),
            queue_name=event_data.get("Queue"),
            leave_time=datetime.utcnow(),
            reason=reason
        )
    
    async def _handle_member_ringging(self, event_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –≤ –æ—á–µ—Ä–µ–¥–∏"""
        logger.info(f"üìû Member ringging: {event_data}")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        await self._increment_operator_stat(
            interface=event_data.get("Interface"),
            stat_type="offered_calls"
        )
    
    async def _handle_bridge_enter(self, event_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ bridge (–∑–≤–æ–Ω–æ–∫ –æ—Ç–≤–µ—á–µ–Ω)"""
        logger.info(f"üåâ Bridge enter: {event_data}")
        
        # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∑–≤–æ–Ω–æ–∫ –æ—Ç–≤–µ—á–µ–Ω
        await self._record_call_answered(event_data)
    
    async def _save_queue_entry(self, queue_entry: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –≤—Ö–æ–¥–µ –≤ –æ—á–µ—Ä–µ–¥—å"""
        pass  # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –ë–î
    
    async def _update_queue_entry_result(self, **kwargs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—á–µ—Ä–µ–¥–∏"""
        pass  # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –ë–î
    
    async def _increment_operator_stat(self, interface: str, stat_type: str):
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        pass  # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –ë–î
    
    async def _record_call_answered(self, event_data: Dict[str, Any]):
        """–ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞"""
        pass  # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –ë–î

class CallFlowConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤"""
    
    # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
    BUSINESS_START_HOUR = 9
    BUSINESS_END_HOUR = 18
    
    # –û—á–µ—Ä–µ–¥–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    DEFAULT_QUEUE = "support"
    
    # –ú–∞–ø–ø–∏–Ω–≥ –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ –æ—á–µ—Ä–µ–¥–∏
    QUEUE_NUMBERS = {
        "100": "support",
        "101": "sales",
        "102": "technical", 
        "200": "vip"
    }
    
    # –°–µ—Ä–≤–∏—Å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    SERVICE_NUMBERS = {
        "500": "ivr_main",
        "501": "voicemail", 
        "502": "callback"
    }
    
    # –¢–∞–π–º–∞—É—Ç—ã
    OPERATOR_RING_TIMEOUT = 25  # —Å–µ–∫—É–Ω–¥
    QUEUE_MAX_WAIT_TIME = 600   # 10 –º–∏–Ω—É—Ç
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—á–µ—Ä–µ–¥–µ–π
    QUEUE_STRATEGIES = {
        "support": "leastrecent",
        "sales": "fewestcalls",
        "technical": "linear", 
        "vip": "ringall"
    }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
call_flow_logic = CallFlowLogic()
call_stats_processor = CallStatisticsProcessor()

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
__all__ = [
    'CallFlowLogic',
    'CallStatisticsProcessor', 
    'CallType',
    'CallProcessingStrategy',
    'call_flow_logic',
    'call_stats_processor'
]