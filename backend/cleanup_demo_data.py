#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ, –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from database import DatabaseManager
from config import config
from auth import get_password_hash
from models import User, UserRole, SystemSettings, AsteriskConfig
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def cleanup_demo_data():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    db = DatabaseManager(config.MONGO_URL, config.DB_NAME)
    
    try:
        # 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–≤–æ–Ω–∫–∏
        result = await db.calls.delete_many({})
        logger.info(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –∑–≤–æ–Ω–∫–æ–≤: {result.deleted_count}")
        
        # 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        result = await db.operators.delete_many({})
        logger.info(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {result.deleted_count}")
        
        # 3. –£–¥–∞–ª—è–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
        result = await db.groups.delete_many({})
        logger.info(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –≥—Ä—É–ø–ø: {result.deleted_count}")
        
        # 4. –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        result = await db.customers.delete_many({})
        logger.info(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {result.deleted_count}")
        
        # 5. –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏
        result = await db.queues.delete_many({})
        logger.info(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –æ—á–µ—Ä–µ–¥–µ–π: {result.deleted_count}")
        
        # 6. –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—Ä–æ–º–µ admin
        result = await db.users.delete_many({"username": {"$ne": "admin"}})
        logger.info(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ admin): {result.deleted_count}")
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
        admin_user = await db.users.find_one({"username": "admin"})
        
        if admin_user:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å admin –Ω–∞ admin
            logger.info("üîß –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
            await db.users.update_one(
                {"username": "admin"},
                {
                    "$set": {
                        "password_hash": get_password_hash("admin"),
                        "role": "admin",
                        "is_active": True,
                        "name": "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
                    }
                }
            )
        else:
            # –°–æ–∑–¥–∞–µ–º admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info("üë§ –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
            admin_user_data = User(
                username="admin",
                email="admin@callcenter.com",
                name="–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                password_hash=get_password_hash("admin"),
                role=UserRole.ADMIN,
                is_active=True
            )
            await db.users.insert_one(admin_user_data.dict())
        
        # 8. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º Asterisk
        logger.info("‚öôÔ∏è  –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await db.settings.delete_many({})
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∫—à–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        asterisk_config = AsteriskConfig(
            host="92.46.62.34",
            port=8088,
            username="smart-call-center",
            password="Almaty20252025",
            protocol="ARI",
            timeout=30,
            enabled=True
        )
        
        production_settings = SystemSettings(
            call_recording=True,
            auto_answer_delay=3,
            max_call_duration=3600,
            queue_timeout=300,
            callback_enabled=True,
            sms_notifications=False,
            email_notifications=True,
            asterisk_config=asterisk_config,
            updated_by="system"
        )
        
        await db.settings.insert_one(production_settings.dict())
        
        # 9. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await db.create_indexes()
        
        logger.info("‚úÖ –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!")
        logger.info("üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        logger.info("üìù –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: admin / admin")
        logger.info("üåê Asterisk: 92.46.62.34:8088")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    finally:
        await db.close()

if __name__ == "__main__":
    asyncio.run(cleanup_demo_data())