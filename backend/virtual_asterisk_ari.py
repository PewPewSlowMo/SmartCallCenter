"""
Virtual Asterisk ARI Mock Server –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Smart Call Center
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç Asterisk ARI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import json
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
import uuid
import random

logger = logging.getLogger(__name__)

class VirtualAsteriskARI:
    """–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π Asterisk ARI —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.is_connected = False
        self.extensions = {
            "1001": {"name": "SIP/1001", "state": "NOT_INUSE", "technology": "PJSIP"},
            "1002": {"name": "SIP/1002", "state": "NOT_INUSE", "technology": "PJSIP"},
            "1003": {"name": "SIP/1003", "state": "INUSE", "technology": "PJSIP"},
            "2001": {"name": "SIP/2001", "state": "UNAVAILABLE", "technology": "PJSIP"},
            "2002": {"name": "SIP/2002", "state": "NOT_INUSE", "technology": "PJSIP"},
        }
        self.active_channels = {}
        self.queues = {
            "general": {"name": "general", "strategy": "ringall", "members": ["SIP/1001", "SIP/1002"]},
            "support": {"name": "support", "strategy": "leastrecent", "members": ["SIP/1003", "SIP/2001"]},
            "sales": {"name": "sales", "strategy": "fewestcalls", "members": ["SIP/2002"]},
        }
        
    async def connect(self, host: str, port: int, username: str, password: str) -> Dict[str, Any]:
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Asterisk ARI"""
        logger.info(f"üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Asterisk: {host}:{port}")
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if host == "demo.asterisk.com" or host == "localhost":
            self.is_connected = True
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}")
            return {
                "success": True,
                "asterisk_version": "20.5.0",
                "system": "Demo Asterisk Server",
                "status": "Connected",
                "build_info": {
                    "kernel": "5.4.0-150-generic",
                    "build_date": "2024-03-15",
                    "build_user": "asterisk"
                }
            }
        elif "192.168" in host or "10.0" in host or "172.16" in host or host.startswith("127."):
            # –õ–æ–∫–∞–ª—å–Ω—ã–µ IP - –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ
            logger.info(f"üè† –õ–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {host}")
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            import random
            
            # –≠–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö IP
            scenarios = [
                {
                    "success": True,
                    "asterisk_version": "18.20.0",
                    "system": f"Local Asterisk Server ({host})",
                    "status": "Connected",
                    "message": f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É {host}:{port}"
                },
                {
                    "success": False,
                    "error": f"Connection timeout: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {host}:{port}. –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω.",
                    "details": {
                        "host": host,
                        "port": port,
                        "timeout": 30,
                        "possible_causes": [
                            "Asterisk —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω",
                            "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ 5038 –¥–ª—è AMI, 8088 –¥–ª—è ARI)",
                            "–ë—Ä–∞–Ω–¥–º–∞—É—ç—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                            "–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ ari.conf –∏–ª–∏ manager.conf"
                        ]
                    }
                },
                {
                    "success": False,
                    "error": f"Authentication failed: –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {username}",
                    "details": {
                        "host": host,
                        "port": port,
                        "username": username,
                        "possible_causes": [
                            "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å",
                            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞",
                            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ /etc/asterisk/ari.conf"
                        ]
                    }
                }
            ]
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π (70% —É—Å–ø–µ—Ö, 30% –æ—à–∏–±–∫–∞)
            if random.random() < 0.7:
                self.is_connected = True
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {host}")
                return scenarios[0]
            else:
                # –°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞
                error_scenario = random.choice(scenarios[1:])
                logger.warning(f"‚ùå –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {host}: {error_scenario['error']}")
                return error_scenario
                
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ö–æ—Å—Ç—ã - –æ—à–∏–±–∫–∞
            logger.warning(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ö–æ—Å—Ç: {host}")
            return {
                "success": False,
                "error": f"Connection failed: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ö–æ—Å—Ç {host}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞.",
                "details": {
                    "host": host,
                    "port": port,
                    "possible_causes": [
                        "–ù–µ–≤–µ—Ä–Ω—ã–π IP –∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è",
                        "DNS –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∏–º—è —Ö–æ—Å—Ç–∞",
                        "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –≤–∞—à–µ–π —Å–µ—Ç–∏",
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å demo.asterisk.com –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                    ]
                }
            }
    
    async def get_asterisk_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ Asterisk"""
        if not self.is_connected:
            raise Exception("Not connected to Asterisk")
            
        return {
            "version": "20.5.0-rc1",
            "system": "Virtual Asterisk Demo",
            "status": {
                "startup_date": "2024-12-21T10:30:00Z",
                "startup_time": "10:30:00",
                "reload_date": "2024-12-21T10:30:00Z",
                "reload_time": "10:30:00"
            },
            "config": {
                "entity_id": "asterisk-demo",
                "default_language": "en",
                "max_channels": 1000,
                "max_open_files": 32768
            }
        }
    
    async def get_endpoints(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ SIP endpoints"""
        if not self.is_connected:
            return []
            
        endpoints = []
        for ext, info in self.extensions.items():
            endpoint = {
                "technology": info["technology"],
                "resource": ext,
                "state": info["state"],
                "channel_ids": [],
                "auth": ext,
                "aors": f"{ext}",
                "contacts": [
                    {
                        "uri": f"sip:{ext}@192.168.1.{100 + int(ext[-2:])}:5060",
                        "contact_status": "Created" if info["state"] != "UNAVAILABLE" else "Removed",
                        "roundtrip_usec": "500" if info["state"] != "UNAVAILABLE" else "0"
                    }
                ],
                "identify": [],
                "outbound_proxy": "",
                "device_state": info["state"]
            }
            endpoints.append(endpoint)
            
        return endpoints
    
    async def get_device_states(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        if not self.is_connected:
            return []
            
        device_states = []
        for ext, info in self.extensions.items():
            device_state = {
                "name": f"PJSIP/{ext}",
                "state": info["state"],
                "class": "SIP"
            }
            device_states.append(device_state)
            
        return device_states
    
    async def get_channels(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        if not self.is_connected:
            return []
            
        channels = []
        for channel_id, channel_info in self.active_channels.items():
            channel = {
                "id": channel_id,
                "name": channel_info["name"],
                "state": channel_info["state"],
                "caller": {
                    "name": channel_info.get("caller_name", ""),
                    "number": channel_info.get("caller_number", "")
                },
                "connected": {
                    "name": channel_info.get("connected_name", ""),
                    "number": channel_info.get("connected_number", "")
                },
                "accountcode": "",
                "dialplan": {
                    "context": channel_info.get("context", "default"),
                    "exten": channel_info.get("extension", ""),
                    "priority": 1,
                    "app_name": "Stasis",
                    "app_data": "smart-call-center"
                },
                "creationtime": channel_info.get("created_at", datetime.utcnow().isoformat()),
                "language": "en"
            }
            channels.append(channel)
            
        return channels
    
    async def get_queues(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥—è—Ö"""
        if not self.is_connected:
            return []
            
        queues_info = []
        for queue_name, queue_data in self.queues.items():
            queue_info = {
                "name": queue_name,
                "strategy": queue_data["strategy"],
                "members": [
                    {
                        "interface": member,
                        "membership": "dynamic",
                        "state_interface": member,
                        "status": random.choice([1, 2, 5]),  # 1=Not in use, 2=In use, 5=Unavailable
                        "paused": False,
                        "penalty": 0,
                        "calls_taken": random.randint(0, 50),
                        "last_call": int(datetime.utcnow().timestamp()) - random.randint(0, 3600)
                    }
                    for member in queue_data["members"]
                ],
                "completed": random.randint(10, 100),
                "abandoned": random.randint(0, 10),
                "servicelevel": random.randint(80, 95),
                "servicelevelperf": random.randint(75, 90),
                "weight": 0,
                "calls": random.randint(0, 5),
                "max": 0,
                "holdtime": random.randint(5, 60),
                "talktime": random.randint(120, 300),
                "callers": []
            }
            queues_info.append(queue_info)
            
        return queues_info
    
    async def originate_call(self, endpoint: str, context: str = "internal", 
                           priority: int = 1, timeout: int = 30) -> Dict[str, Any]:
        """–ò–º–∏—Ç–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞"""
        if not self.is_connected:
            return {"success": False, "error": "Not connected"}
            
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∫–∞–Ω–∞–ª–∞
        channel_id = f"channel-{uuid.uuid4().hex[:8]}"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
        channel_info = {
            "name": f"PJSIP/{endpoint.replace('PJSIP/', '')}-{uuid.uuid4().hex[:8]}",
            "state": "Ring",
            "caller_number": "smart-call-center",
            "connected_number": endpoint.replace('PJSIP/', ''),
            "context": context,
            "extension": endpoint.replace('PJSIP/', ''),
            "created_at": datetime.utcnow().isoformat()
        }
        
        self.active_channels[channel_id] = channel_info
        
        # –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞
        success_rate = 0.8  # 80% —É—Å–ø–µ—à–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
        if random.random() < success_rate:
            return {
                "success": True,
                "channel_id": channel_id,
                "message": f"Call originated to {endpoint}"
            }
        else:
            return {
                "success": False,
                "error": f"Failed to originate call to {endpoint}: Busy"
            }
    
    async def hangup_channel(self, channel_id: str) -> Dict[str, Any]:
        """–ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞"""
        if not self.is_connected:
            return {"success": False, "error": "Not connected"}
            
        if channel_id in self.active_channels:
            del self.active_channels[channel_id]
            return {
                "success": True,
                "message": f"Channel {channel_id} hungup"
            }
        else:
            return {
                "success": False,
                "error": f"Channel {channel_id} not found"
            }
    
    async def answer_channel(self, channel_id: str) -> Dict[str, Any]:
        """–ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫"""
        if not self.is_connected:
            return {"success": False, "error": "Not connected"}
            
        if channel_id in self.active_channels:
            self.active_channels[channel_id]["state"] = "Up"
            return {
                "success": True,
                "message": f"Channel {channel_id} answered"
            }
        else:
            return {
                "success": False,
                "error": f"Channel {channel_id} not found"
            }
    
    async def generate_call_event(self, event_type: str = "StasisStart") -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∑–≤–æ–Ω–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        channel_id = f"channel-{uuid.uuid4().hex[:8]}"
        caller_numbers = ["+79001234567", "+79007654321", "+79123456789", "+74952345678"]
        
        if event_type == "StasisStart":
            caller_number = random.choice(caller_numbers)
            self.active_channels[channel_id] = {
                "name": f"PJSIP/{caller_number}-{uuid.uuid4().hex[:8]}",
                "state": "Ring",
                "caller_number": caller_number,
                "created_at": datetime.utcnow().isoformat()
            }
            
            return {
                "type": "StasisStart",
                "timestamp": datetime.utcnow().isoformat(),
                "application": "smart-call-center",
                "channel": {
                    "id": channel_id,
                    "name": self.active_channels[channel_id]["name"],
                    "state": "Ring",
                    "caller": {
                        "name": "",
                        "number": caller_number
                    },
                    "connected": {
                        "name": "",
                        "number": ""
                    },
                    "accountcode": "",
                    "dialplan": {
                        "context": "incoming",
                        "exten": "s",
                        "priority": 1
                    },
                    "creationtime": self.active_channels[channel_id]["created_at"],
                    "language": "en"
                }
            }
            
        elif event_type == "ChannelStateChange":
            if self.active_channels:
                channel_id = random.choice(list(self.active_channels.keys()))
                new_state = random.choice(["Up", "Ringing", "Busy"])
                self.active_channels[channel_id]["state"] = new_state
                
                return {
                    "type": "ChannelStateChange",
                    "timestamp": datetime.utcnow().isoformat(),
                    "channel": {
                        "id": channel_id,
                        "name": self.active_channels[channel_id]["name"],
                        "state": new_state
                    }
                }
        
        elif event_type == "StasisEnd":
            if self.active_channels:
                channel_id = random.choice(list(self.active_channels.keys()))
                channel_info = self.active_channels.pop(channel_id)
                
                return {
                    "type": "StasisEnd",
                    "timestamp": datetime.utcnow().isoformat(),
                    "channel": {
                        "id": channel_id,
                        "name": channel_info["name"],
                        "state": "Down"
                    }
                }
        
        return None
    
    def update_extension_state(self, extension: str, state: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è extension"""
        if extension in self.extensions:
            self.extensions[extension]["state"] = state
            logger.info(f"Extension {extension} state updated to {state}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ ARI
_virtual_ari = VirtualAsteriskARI()

def get_virtual_ari() -> VirtualAsteriskARI:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ ARI"""
    return _virtual_ari