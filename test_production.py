#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–¥–∞–∫—à–Ω —Å–∏—Å—Ç–µ–º—ã Smart Call Center
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""

import asyncio
import aiohttp
import json
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BASE_URL = "http://localhost:8001/api"

async def test_production_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–Ω Smart Call Center...")
    
    async with aiohttp.ClientSession() as session:
        
        # 1. –¢–µ—Å—Ç health check
        logger.info("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ health check...")
        try:
            async with session.get(f"{BASE_URL}/health") as resp:
                if resp.status == 200:
                    data = await resp.json()
                    logger.info(f"‚úÖ Health check: {data['status']}")
                else:
                    logger.error(f"‚ùå Health check failed: {resp.status}")
        except Exception as e:
            logger.error(f"‚ùå Health check error: {e}")
        
        # 2. –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ admin/admin
        logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ admin/admin...")
        token = None
        try:
            login_data = {"username": "admin", "password": "admin"}
            async with session.post(f"{BASE_URL}/auth/login", json=login_data) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    token = data.get("access_token")
                    logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {data.get('user', {}).get('name')}")
                else:
                    logger.error(f"‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è failed: {resp.status}")
                    text = await resp.text()
                    logger.error(f"Response: {text}")
        except Exception as e:
            logger.error(f"‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è error: {e}")
        
        if not token:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç—ã")
            return
        
        headers = {"Authorization": f"Bearer {token}"}
        
        # 3. –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        logger.info("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
        try:
            async with session.get(f"{BASE_URL}/admin/system/info", headers=headers) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞:")
                    logger.info(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {data['users']}")
                    logger.info(f"   - –û–ø–µ—Ä–∞—Ç–æ—Ä—ã: {data['operators']}")
                    logger.info(f"   - –ë–î: {data['database']['status']}")
                    logger.info(f"   - Asterisk: {data['asterisk']['status']}")
                    logger.info(f"   - API: {data['api']['status']}")
                else:
                    logger.error(f"‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è failed: {resp.status}")
        except Exception as e:
            logger.error(f"‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è error: {e}")
        
        # 4. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Asterisk
        logger.info("4Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Asterisk...")
        try:
            asterisk_config = {
                "host": "92.46.62.34",
                "port": 8088,
                "username": "smart-call-center",
                "password": "Almaty20252025",
                "protocol": "ARI",
                "timeout": 30,
                "enabled": True
            }
            
            async with session.post(f"{BASE_URL}/admin/settings/asterisk/test", 
                                  json=asterisk_config, headers=headers) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    logger.info(f"‚úÖ Asterisk —Ç–µ—Å—Ç: {data['success']}")
                    logger.info(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}")
                    if data.get('data'):
                        logger.info(f"   –í–µ—Ä—Å–∏—è: {data['data'].get('asterisk_version', 'Unknown')}")
                else:
                    logger.error(f"‚ùå Asterisk —Ç–µ—Å—Ç failed: {resp.status}")
                    text = await resp.text()
                    logger.error(f"Response: {text}")
        except Exception as e:
            logger.error(f"‚ùå Asterisk —Ç–µ—Å—Ç error: {e}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoints Asterisk
        logger.info("5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoints –∏–∑ Asterisk...")
        try:
            async with session.get(f"{BASE_URL}/asterisk/extensions", headers=headers) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    logger.info(f"‚úÖ Extensions –Ω–∞–π–¥–µ–Ω–æ: {len(data)}")
                    for ext in data[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        logger.info(f"   - {ext['extension']}: {ext['state']} ({ext['technology']})")
                else:
                    logger.error(f"‚ùå Extensions failed: {resp.status}")
        except Exception as e:
            logger.error(f"‚ùå Extensions error: {e}")
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π
        logger.info("6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π –∏–∑ Asterisk...")
        try:
            async with session.get(f"{BASE_URL}/asterisk/queues", headers=headers) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    logger.info(f"‚úÖ –û—á–µ—Ä–µ–¥–∏ –Ω–∞–π–¥–µ–Ω–æ: {len(data)}")
                    for queue in data[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                        logger.info(f"   - {queue['name']}: {queue['members_count']} –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤")
                else:
                    logger.error(f"‚ùå –û—á–µ—Ä–µ–¥–∏ failed: {resp.status}")
        except Exception as e:
            logger.error(f"‚ùå –û—á–µ—Ä–µ–¥–∏ error: {e}")
        
        # 7. Real-time –¥–∞–Ω–Ω—ã–µ
        logger.info("7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ real-time –¥–∞–Ω–Ω—ã—Ö...")
        try:
            async with session.get(f"{BASE_URL}/asterisk/realtime-data", headers=headers) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    logger.info(f"‚úÖ Real-time –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {data['connected']}")
                    logger.info(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {data['active_channels']}")
                    logger.info(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏: {data['active_calls']}")
                    logger.info(f"   Extensions: {len(data.get('extensions', []))}")
                else:
                    logger.error(f"‚ùå Real-time –¥–∞–Ω–Ω—ã–µ failed: {resp.status}")
        except Exception as e:
            logger.error(f"‚ùå Real-time –¥–∞–Ω–Ω—ã–µ error: {e}")
        
        logger.info("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        logger.info("üìù –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")

if __name__ == "__main__":
    asyncio.run(test_production_system())