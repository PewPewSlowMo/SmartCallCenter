#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Smart Call Center —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º Asterisk ARI
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤
"""

import requests
import json
import os
import sys
import time
import asyncio
from dotenv import load_dotenv
from datetime import datetime

# Load environment variables
load_dotenv('/app/frontend/.env')

BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL')
if not BACKEND_URL:
    print("‚ùå Error: REACT_APP_BACKEND_URL not found")
    sys.exit(1)

API_BASE_URL = f"{BACKEND_URL}/api"
print(f"üîó Testing API at: {API_BASE_URL}")

# Test data
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD = "admin"
VIRTUAL_ASTERISK_HOST = "demo.asterisk.com"

# Global variables
auth_token = None
test_operator_id = None
test_extension = "1001"

def print_step(step_num, description):
    """Print formatted test step"""
    print(f"\n{'='*60}")
    print(f"üìã –®–∞–≥ {step_num}: {description}")
    print(f"{'='*60}")

def print_result(success, message):
    """Print formatted test result"""
    icon = "‚úÖ" if success else "‚ùå"
    print(f"{icon} {message}")
    return success

def test_admin_login():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print_step(1, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    global auth_token
    try:
        payload = {"username": ADMIN_USERNAME, "password": ADMIN_PASSWORD}
        response = requests.post(f"{API_BASE_URL}/auth/login", json=payload)
        
        if response.status_code == 200:
            data = response.json()
            auth_token = data["access_token"]
            user_role = data["user"]["role"]
            
            return print_result(
                auth_token and user_role == "admin",
                f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –†–æ–ª—å: {user_role}"
            )
        else:
            return print_result(False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
            
    except Exception as e:
        return print_result(False, f"–û—à–∏–±–∫–∞: {str(e)}")

def test_asterisk_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º—É Asterisk"""
    print_step(2, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º—É Asterisk ARI")
    
    try:
        headers = {"Authorization": f"Bearer {auth_token}"}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ Asterisk
        asterisk_config = {
            "host": VIRTUAL_ASTERISK_HOST,
            "port": 8088,
            "username": "asterisk",
            "password": "asterisk",
            "protocol": "ARI",
            "timeout": 30
        }
        
        response = requests.post(
            f"{API_BASE_URL}/admin/settings/asterisk/test", 
            json=asterisk_config,
            headers=headers
        )
        
        if response.status_code == 200:
            data = response.json()
            success = data.get("success", False)
            message = data.get("message", "")
            
            return print_result(success, f"–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {message}")
        else:
            return print_result(False, f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status_code}")
            
    except Exception as e:
        return print_result(False, f"–û—à–∏–±–∫–∞: {str(e)}")

def test_save_asterisk_settings():
    """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Asterisk"""
    print_step(3, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Asterisk")
    
    try:
        headers = {"Authorization": f"Bearer {auth_token}"}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º Asterisk
        settings = {
            "call_recording": True,
            "auto_answer_delay": 3,
            "max_call_duration": 3600,
            "queue_timeout": 300,
            "callback_enabled": True,
            "sms_notifications": False,
            "email_notifications": True,
            "asterisk_config": {
                "host": VIRTUAL_ASTERISK_HOST,
                "port": 8088,
                "username": "asterisk",
                "password": "asterisk",
                "protocol": "ARI",
                "timeout": 30,
                "enabled": True
            }
        }
        
        response = requests.put(
            f"{API_BASE_URL}/admin/settings", 
            json=settings,
            headers=headers
        )
        
        if response.status_code == 200:
            data = response.json()
            asterisk_enabled = data.get("asterisk_config", {}).get("enabled", False)
            
            return print_result(
                asterisk_enabled,
                f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. Asterisk enabled: {asterisk_enabled}"
            )
        else:
            return print_result(False, f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {response.status_code}")
            
    except Exception as e:
        return print_result(False, f"–û—à–∏–±–∫–∞: {str(e)}")

def test_create_operator():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    print_step(4, "–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å extension")
    
    global test_operator_id
    try:
        headers = {"Authorization": f"Bearer {auth_token}"}
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        operator_data = {
            "username": "operator1",
            "email": "operator1@callcenter.com",
            "name": "–¢–µ—Å—Ç–æ–≤—ã–π –û–ø–µ—Ä–∞—Ç–æ—Ä",
            "password": "operator123",
            "role": "operator",
            "extension": test_extension
        }
        
        response = requests.post(
            f"{API_BASE_URL}/admin/users", 
            json=operator_data,
            headers=headers
        )
        
        if response.status_code == 200:
            data = response.json()
            test_operator_id = data["id"]
            
            return print_result(
                True,
                f"–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω. ID: {test_operator_id}, Extension: {test_extension}"
            )
        else:
            return print_result(False, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.status_code}")
            
    except Exception as e:
        return print_result(False, f"–û—à–∏–±–∫–∞: {str(e)}")

def test_get_operator_info():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    print_step(5, "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
    
    try:
        headers = {"Authorization": f"Bearer {auth_token}"}
        
        response = requests.get(
            f"{API_BASE_URL}/admin/users/{test_operator_id}/operator",
            headers=headers
        )
        
        if response.status_code == 200:
            data = response.json()
            extension = data.get("extension") if data else None
            
            return print_result(
                extension == test_extension,
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞. Extension: {extension}"
            )
        else:
            return print_result(False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {response.status_code}")
            
    except Exception as e:
        return print_result(False, f"–û—à–∏–±–∫–∞: {str(e)}")

def test_get_asterisk_extensions():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è extensions –∏–∑ Asterisk"""
    print_step(6, "–ü–æ–ª—É—á–µ–Ω–∏–µ extensions –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ Asterisk")
    
    try:
        headers = {"Authorization": f"Bearer {auth_token}"}
        
        response = requests.get(
            f"{API_BASE_URL}/asterisk/extensions",
            headers=headers
        )
        
        if response.status_code == 200:
            extensions = response.json()
            extension_numbers = [ext["extension"] for ext in extensions]
            
            return print_result(
                len(extensions) > 0,
                f"–ü–æ–ª—É—á–µ–Ω–æ {len(extensions)} extensions: {extension_numbers}"
            )
        else:
            return print_result(False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è extensions: {response.status_code}")
            
    except Exception as e:
        return print_result(False, f"–û—à–∏–±–∫–∞: {str(e)}")

def test_get_asterisk_queues():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π –∏–∑ Asterisk"""
    print_step(7, "–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ Asterisk")
    
    try:
        headers = {"Authorization": f"Bearer {auth_token}"}
        
        response = requests.get(
            f"{API_BASE_URL}/asterisk/queues",
            headers=headers
        )
        
        if response.status_code == 200:
            queues = response.json()
            queue_names = [queue["name"] for queue in queues]
            
            return print_result(
                len(queues) > 0,
                f"–ü–æ–ª—É—á–µ–Ω–æ {len(queues)} –æ—á–µ—Ä–µ–¥–µ–π: {queue_names}"
            )
        else:
            return print_result(False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π: {response.status_code}")
            
    except Exception as e:
        return print_result(False, f"–û—à–∏–±–∫–∞: {str(e)}")

def test_realtime_data():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    print_step(8, "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ Asterisk")
    
    try:
        headers = {"Authorization": f"Bearer {auth_token}"}
        
        response = requests.get(
            f"{API_BASE_URL}/asterisk/realtime-data",
            headers=headers
        )
        
        if response.status_code == 200:
            data = response.json()
            connected = data.get("connected", False)
            asterisk_version = data.get("asterisk_version", "Unknown")
            active_channels = data.get("active_channels", 0)
            extensions_count = len(data.get("extensions", []))
            
            return print_result(
                connected,
                f"Asterisk {asterisk_version}, Channels: {active_channels}, Extensions: {extensions_count}"
            )
        else:
            return print_result(False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
            
    except Exception as e:
        return print_result(False, f"–û—à–∏–±–∫–∞: {str(e)}")

def test_system_info():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    print_step(9, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    
    try:
        headers = {"Authorization": f"Bearer {auth_token}"}
        
        response = requests.get(
            f"{API_BASE_URL}/admin/system/info",
            headers=headers
        )
        
        if response.status_code == 200:
            data = response.json()
            users_count = data.get("users", 0)
            asterisk_connected = data.get("asterisk_connected", False)
            
            return print_result(
                users_count >= 1,  # –ê–¥–º–∏–Ω + —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}, Asterisk: {'‚úì' if asterisk_connected else '‚úó'}"
            )
        else:
            return print_result(False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {response.status_code}")
            
    except Exception as e:
        return print_result(False, f"–û—à–∏–±–∫–∞: {str(e)}")

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print(f"""
üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SMART CALL CENTER
üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º Asterisk ARI
""")
    
    tests = [
        test_admin_login,
        test_asterisk_connection,
        test_save_asterisk_settings,
        test_create_operator,
        test_get_operator_info,
        test_get_asterisk_extensions,
        test_get_asterisk_queues,
        test_realtime_data,
        test_system_info
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    print(f"\n{'='*60}")
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"{'='*60}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å Asterisk ARI")
    else:
        print(f"\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    
    print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    run_all_tests()